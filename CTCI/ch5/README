Chapter 5: Bit Manipulation

1. You are given two 32-bit numbers N and M and two bit positions, i and j.
   Write a method to insert M into N such that M starts at bit j and ends at i.
   You can assume that the window between j and i is wide enough to fit all of
   M.

2. Given a real number between 0 and 1, (e.g. 0.72) that is passed in as a
   double, print the binary representation.  If the number can not be
   represented accurately in binary with at most 32 characters, print ERROR.

3. You have an integer and you can flip exactly one bit from 0 to 1.  Write
   a function to find the length of the longest sequence of 1's that you could
   create by setting just 1 bit from 0 -> 1.

4. Given a positive integer, print the next smallest and the next largest that
   have the same number of bits in their binary representation.

5. Explain what the following code does: (n & (n - 1)) == 0.

6. Write a function to determine the number of buts you would need to flip to
   concery integer A to integer B.

7. Write a program to swap odd and even bits in an integer with as few
   instructions as possible (e.g. bit 0 and bit 1 are swapped, bit 2 and bit 3
   swapped, and so on).

8. A monochrome screen is stored as a single array of bytes, allowing eight
   consecutive pixels to be stored in one byte.  The screen has a width w,
   where w is divisible by 8 (that is, no byte will be split across rows).
   The height of the screen, of course, can be derived from the length of the
   array and the width.  Implement a function that draws a horizontal line from
   (x1, y) to (x2, y).

9. Bonus: Write a function which reverses the bits in a byte.
