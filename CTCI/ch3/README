Chapter 3: Stacks and Queues

1. Describe how you could use a single array to implement three stacks.

2. Design a stack which, in addition to push and pop, has a function min()
   which returns the minimum element.  All functions should operate in O(1)
   time.

3. Implement a structure SetOfStacks (I called it stackset_t) which starts
   a new stack when the limit of the most recent stack has reached a defined
   capacity.  The entire structure should still behave the way a normal stack
   would for push and pop methods.
   FOLLOW UP: Implement an API that will allow a caller to pop from a specified
   stack within the set, provided the index of the stack within the set.

4. Implement a queue by using two stacks.

5. Write a program to sort the elements in an unsorted stack.  The only other
   auxiliary data structure that you're allowed to use is another stack.

6. Design and implement an animal shelter which can hold dogs and cats.  The
   shelter has an adoption policy where you must adopt the animal that has
   been there the longest first.  A consumer should also have the option of
   adopting a certain type of animal (either a dog OR a cat).  In such a case,
   they should receive an animal of the specifed type which has been in the
   shelter the longest.
   Note: The solution in the book gave each animal a timestamp of sorts, so that
   in the case that someone asked for any (dog or cat), they could determine
   which of the two had been there the longest.  This makes the implementation
   much easier, but it has a downside, namely that over time, the integer that
   is used to ensure order, will overflow, (or if no adoptions have occurred,
   we will simply run out of ids to assign an animal.  This will not cut it in
   production software.  Engineers who do not plan for such things should not
   be hired.  Sadly, these types of people are exactly who get hired, creating
   more work for the rest of us later on after they've already accepted another
   offer somewhere else.  The right thing to do is to implement the shelter
   that does not rely on a timestamp in order to achieve the outlined
   objectives.
